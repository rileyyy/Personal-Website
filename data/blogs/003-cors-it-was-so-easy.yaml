id: 003
tags: ['JavaScript', 'Docker', 'ASP.NET']
title: Of cors it was something simple
listDate: 2024-11-05
content: >
  According to the git history of this project it has been exactly one week since it began, and the first 'doh' moment finally hit.  As someone new to JavaScript I tend to think of things as an application developer, and it has finally gotten me in trouble. In the world of applications software, code runs where code is for the most part.  If I deploy a C++ server on computers A and B, I expect that the code needs some way of knowing that it is talking to the other server. Now that logic does not extend the same to web development I learn.

  Now my understanding wasn't exactly wrong as the MongoDB instance is its own container, and the ASP.NET backend obviously is going to run on the container I tell it to run on. This means that setting up the communication between the two is as simple as getting the Mongo connection string right and making sure there is a network they can communicate on. However, the frontend doesn't work quite the same.  In my own naive world, I expect to setup a network between the node container and the .NET container and have them talk to each other.

  My first attempt to setup communication between involved logging the result of the nodes API query to the console. But alas, I was greeted with communications errors. Copilot was quick to point out that this is because the .fetch() command might not exist so I should install node-fetch. Well, no dice. Next it suggests that I should check the docker network settings. Even though I know I wrote them correctly, I cross the T's and dot the I's the exact way it recommends. Nope. So I probe it some more, because its clearly been trained on all that data on github right? It must know what it is talking about. It suggests a different version of node-fetch. Still broken, but a different error. Progress right? Well no, not really. It proceeds to drag me in circles, suggesting slight variations of the same three things.

  This is going nowhere, so I fall back to the old ways. Stack overflow. There are some suggestions, and the only one that seems to make sense is something called CORS (Cross-Origin Resource Sharing). Effectively security settings so that not everyone everywhere can access my API. Okay, added it to .NET so that the Vue container has all permissions. Still broken. So I dive deeper. I setup tcpdump on my .NET container and using a little wget magic make a request to the API. I see the request processed and returned correctly. So the API is working, but the frontend is not.

  At this point I'm losing my mind. I've tried copilot and some weird AI that Google has built into Chrome to help diagnose errors in the console. Neither have helped. I can see the query and response, but the website is still broken. As a last resort, I try ChatGPT4. After 5 hours, and now 3 different AI's, ChatGPT gives me the answer. It was so simple. My website is running in the browser. On my laptop. Not my Vue container. The .NET container is blocking the request because it is coming from http://localhost not http://node-app. I change the CORS URL to allow localhost and it works, perfectly.

  In my own, minimal, defense, I watched a 5 minute explanation of Client Side Rendering (CSR) vs Server Side Rendering (SSR) and wrongly thought that the Vue container would be making the API query before the website was sent over to the browser. I was wrong. I had not intended to deal with all the fancy things that websites do, like hydration and CSR vs. SSR until way later down the line.